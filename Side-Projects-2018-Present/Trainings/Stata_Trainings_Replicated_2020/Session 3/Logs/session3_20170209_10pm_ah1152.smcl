{smcl}
{txt}{sf}{ul off}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}C:\Users\ah1152\Box Sync\gui2de STATA Tutorials/Session 3/Logs/session3_20170209_10pm_ah1152.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res} 9 Feb 2017, 22:58:42
{txt}
{com}. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
{txt}
{com}. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
{txt}
{com}. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
{txt}
{com}. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
{txt}
{com}. 
. use "$project_e", clear
{txt}
{com}. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
{txt}(29,869 missing values generated)

{com}. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
{txt}variable {bf}mq10_new{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str6{sf}
{txt}(5,252 real changes made)

{com}. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
{txt}(3 real changes made)

{com}. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
{txt}(663 real changes made)

{com}. replace mq10_new = "" if regexm(mq10,"pm")
{txt}(366 real changes made)

{com}. replace mq10_new = "" if regexm(mq10,"p.m")
{txt}(4 real changes made)

{com}. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
{txt}
{com}. use "$project_t", clear
{txt}
{com}. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
{txt}
{com}. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
{txt}
{com}.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
{txt}
{com}.                 
.                 use "$popdensity", clear
{txt}
{com}.                 end
{err}command {bf}end{sf} is unrecognized
{txt}{search r(199), local:r(199);}

end of do-file

{search r(199), local:r(199);}

{com}. br if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1

. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
{txt}(556 observations deleted)

{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
{txt}
{com}.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
{txt}(108 real changes made)
(108 real changes made)
(93 real changes made)
(14 real changes made)
(0 real changes made)

{com}.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
{txt}(108 real changes made)

{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 rename NOMCIRCONSCRIPTION departement
{res}{txt}
{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
{txt}
{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 save "$temp1", replace
{txt}(note: file gui2de STATA Tutorials/Session 3/Data/temp1.dta not found)
file gui2de STATA Tutorials/Session 3/Data/temp1.dta saved

{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 use "$section0", clear
{txt}
{com}. 
.                 decode b06_departemen, gen(departement)
{txt}
{com}. 
.                 merge m:1 departement using "$temp1"
{res}{txt}{p 0 7 2}
(note: variable
departement was 
str18, now str33 to accommodate using data's values)
{p_end}

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}             352
{txt}{col 9}from master{col 30}{res}             348{txt}  (_merge==1)
{col 9}from using{col 30}{res}               4{txt}  (_merge==2)

{col 5}matched{col 30}{res}          12,551{txt}  (_merge==3)
{col 5}{hline 41}

{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
{txt}
{com}.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
{txt}
{com}.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
{txt}
{com}.                 
.                 use "$popdensity", clear
{txt}
{com}.                 end
{err}command {bf}end{sf} is unrecognized
{txt}{search r(199), local:r(199);}

end of do-file

{search r(199), local:r(199);}

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
{txt}
{com}.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
{txt}
{com}.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
{txt}
{com}.                 
.                 use "$popdensity", clear
{txt}
{com}. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
{txt}(556 observations deleted)

{com}.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
{txt}
{com}.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
{txt}(108 real changes made)
(108 real changes made)
(93 real changes made)
(14 real changes made)
(0 real changes made)

{com}.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
{txt}(108 real changes made)

{com}.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
{res}{txt}
{com}. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
{txt}(1 real change made)

{com}.                 replace departement="sandegue" if departement=="sangue"
{txt}(1 real change made)

{com}.                 replace departement="sassandra" if departement=="dusassandra"
{txt}(1 real change made)

{com}. 
.                 rename POPULATION population
{res}{txt}
{com}.                 rename SUPERFICIEKM2 areasqkm
{res}{txt}
{com}.                 rename DENSITEAUKM pop_density
{res}{txt}
{com}. 
.                 save "$temp1", replace
{txt}file gui2de STATA Tutorials/Session 3/Data/temp1.dta saved

{com}. 
.                 use "$section0", clear
{txt}
{com}. 
.                 decode b06_departemen, gen(departement)
{txt}
{com}. 
.                 merge m:1 departement using "$temp1"
{res}{txt}{p 0 7 2}
(note: variable
departement was 
str18, now str33 to accommodate using data's values)
{p_end}

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               1
{txt}{col 9}from master{col 30}{res}               0{txt}  (_merge==1)
{col 9}from using{col 30}{res}               1{txt}  (_merge==2)

{col 5}matched{col 30}{res}          12,899{txt}  (_merge==3)
{col 5}{hline 41}

{com}. 
{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}.                 drop if _merge==2 //dropping the extra department from pop_density file
{txt}(1 observation deleted)

{com}. 
.                 summ _merge

{txt}    Variable {c |}        Obs        Mean    Std. Dev.       Min        Max
{hline 13}{c +}{hline 57}
{space 6}_merge {c |}{res}     12,899           3           0          3          3
{txt}
{com}.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
{txt}
{com}. 
{txt}end of do-file

{com}. help assert

. help restore

. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:35:23{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
.         
.         display "Hello, World"
. 
. log close
. 
. 
. * Approach 2 (use globals)
. 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. /*
> Capture:
> capture executes command, suppressing all its output (including error messages, if any) 
> */
. 
. *Approach 3 (use capture & globals)
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. capture log close
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. 
. 
. 
. *Aproach 4 (use capture, globals AND c-class values)
. 
. 
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. log using "$log", replace
. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
. 
. use "$project_e", clear
. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
. replace mq10_new = "" if regexm(mq10,"pm")
. replace mq10_new = "" if regexm(mq10,"p.m")
. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
. use "$project_t", clear
. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
.                 
.                 use "$popdensity", clear
. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
.                 replace departement="sandegue" if departement=="sangue"
.                 replace departement="sassandra" if departement=="dusassandra"
. 
.                 rename POPULATION population
.                 rename SUPERFICIEKM2 areasqkm
.                 rename DENSITEAUKM pop_density
. 
.                 save "$temp1", replace
. 
.                 use "$section0", clear
. 
.                 decode b06_departemen, gen(departement)
. 
.                 merge m:1 departement using "$temp1"
.                 /*
>                         Result                           # of obs.
>                         -----------------------------------------
>                         not matched                             1
>                                 from master                         0  (_merge==1)
>                                 from using                          1  (_merge==2)
> 
>                         matched                            12,899  (_merge==3)
>                         -----------------------------------------
>                 */
.                 drop if _merge==2 //dropping the extra department from pop_density file
. 
.                 summ _merge
.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
. 
. *************
. 
. /*
> Assert:
> It verifies that exp is true.  If it is true, the command produces no output.  
> If it is not true, assert informs you that the "assertion is false" and issues a
> return code of 9
> */
. 
. 
. *****************************
. *Approximate String Matching:
. *****************************
. *In a lot of cases we can't use merge/data cleaning and have to rely on 
. *fuzzy matching.
. 
. *Example: Tanzania Election data:
. *Issue: We have election data from 1995, 2000, 2005, 2010 and 2015. We want to 
. *match politicians who ran in multiple elections.
. 
. global election "gui2de STATA Tutorials/Session 3/Data/Tanzania_Election.dta"
. global temp_95 "gui2de STATA Tutorials/Session 3/Data/temp_1995.dta"
. global temp_00 "gui2de STATA Tutorials/Session 3/Data/temp_2000.dta"
. 
. 
. use "$election"
. 
. 
. preserve
.         keep if year==1995
.         keep serial candidate
.         save "$temp_95", replace //1222 obs
. restore
. 
. preserve
.         keep if year==2000
.         keep serial candidate
.         save "$temp_00", replace //1222 obs
. restore
. 
. 
. use "$temp_95", clear
. 
. *match 2000 to 1995 data set
. matchit serial candidate using "$temp_00", idusing(serial) txtusing(candidate)
. end
. keep if similscore>=0.63 //Jessica's idea
. 
. *sort by 1995 serial number, keep only best match 
. gsort serial -similscore
. duplicates drop serial, force
. gsort -similscore
. *sort by 2000 serial number, keep only best match
. gsort serial1 -similscore
. duplicates drop serial1, force
. gsort -similscore
. 
. 
. 
. 
. 
. 
. 
. /*
> You should be able to Your do file should be 
> 
> 
> ********local Vs Global*************
> 
> /*
> local:
> Local macros are only visible locally, meaning within
> the same program, do file, do-file editor contents or interactive
> session
> */
> 
> /*
> global:
> Global macros are visible everywhere, or globally, meaning within any program, 
> do file, or do-file editor contents and within an interactive session.  
> */
> 
> /*
> The difference between local and global macros is that local macros are private 
> and global macros
> are public
> */
> 
> *Example
> 
> global X "Apples"
> display "$X"
> 
> local X "Apples"
> display "`X'"
> 
> *run line 56 & 57 together and then separately. Notice the difference! 
> 
> 
> *Example (Global)
> 
>         global wd "C:/Users/ah1152/Box Sync/"
>         *NOTE: Change ^^^THIS^^^
> 
>         use "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance", clear
> 
>         *OR I can define another global for the dataset:
>         clear
>         global insurance "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance"
>         global project_t "$wd/gui2de STATA Tutorials/Session 2/Data/project_t"
>         global project_e "$wd/gui2de STATA Tutorials/Session 2/Data/project_e"
>         global project_educ "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ"
>         
>         *load insurance data
>         use "$insurance", clear
>         
>         *load project T data
>         use "$project_t", clear
>         
> 
> *Example (local)
> 
>         regress vin1q1_yes treat_makutano treat_mil treat_makutano_amt  treat_mil_amt age_in_years age_square secondaryschool wealth_index employed married television membership election_dummy , cluster(circlecode) 
> 
>         ****running the same regression useing locals
>         *Set locals for independent variables
>         local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                 
>         *Set locals for constants
>         local controls age_in_years age_square secondaryschool wealth_index ///
>                 employed married television membership election_dummy
>         
>         reg vin1q1_yes `treatment' `controls', cluster(circlecode) 
> 
> 
> 
>  ********************************************************************************
> * LoopsL foreach & forvalues
> ********************************************************************************
> 
> /*
> *foreach:
> foreach repeatedly sets local macro lname to each element of the list and executes
> the commands enclosed in braces.  The loop is executed zero or more times; it is 
> executed zero times if the list is null or empty.
> */
> 
> *Example 1:
> 
>         foreach alphabet in a b c d e f g h i j k l m n o p q r s t u v x y z {c -(}
>         display "`alphabet'"
>         {c )-}
> *
> *Example 2:
> 
>         use "$project_t", clear
>         *add "b_" prefix 
>         foreach x in circlecode treatment age_in_years treat_makutano treat_mil ///
>         treat_makutano_amt treat_mil_amt age_square secondaryschool wealth_index employed ///
>          married television membership election_dummy vin1q1_yes vin1q2_yes vin1q3_yes ///
>          vin1q4_yes {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
>          *using wildcard options
>          use "$project_t", clear
>          foreach x in * {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
> *Example 3:
> use "$project_t", clear
> 
>         foreach dep_var in vin1q1_yes vin1q2_yes vin1q3_yes vin1q4_yes{c -(}
> 
>                 *Set locals for independent variables
>                 local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                         
>                 *Set locals for constants
>                 local controls age_in_years age_square secondaryschool wealth_index ///
>                         employed married television membership election_dummy
>                 
>                 reg `dep_var' `treatment' `controls', cluster(circlecode) 
> {c )-}
> *
> 
> 
> /*
> forvalues:
> forvalues repeatedly sets local macro lname to each element of range and executes
> the commands enclosed in braces.  The loop is executed zero or more times.
> */
> 
> *Example 1:
>         forvalues i=1/20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 2:
>         forvalues i=1 (2) 20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 3 (calculating duration for each insurance plan
> use "$insurance", clear
> gen     policy_duration1 = expirydate1 - startdate1
> gen     policy_duration2 = expirydate2 - startdate2
> gen     policy_duration3 = expirydate3 - startdate3
> gen     policy_duration4 = expirydate4 - startdate4
> gen     policy_duration5 = expirydate5 - startdate5
> 
> /*
>         "RULE OF THREE" (code duplication)
> "You are allowed to copy and paste the code once, but that when the same code is 
> replicated three times, it should be extracted into a new procedure.
> 
> Duplication in programming is almost always in indication of poorly designed 
> code or poor coding habits. Duplication is a bad practice because it makes code 
> harder to maintain." 
> */
> 
> *We can use forvalues loop to generate these 5 variables
> use "$insurance", clear
> forvalues i= 1/5 {c -(}
> gen policy_duration`i' = (expirydate`i' - startdate`i')
> {c )-}
> *
> 
> ********************************************************************************
> * Indexing: Referring to observations, keeping, and dropping obs :
> ********************************************************************************
> 
> * _n refers to the number of the row 
> 
> use "$insurance", clear
> gen obsnum=_n 
> lab var obsnum "Observation number" 
> order obsnum, first 
> 
> 
> * writing _n refers to observations 
> list if _n<50 //will browse the first 49 observations 
> 
> *dropping and keeping 
> drop if _n>1000 
> keep if _n<=100 //will keep the first 100 observatiosn 
> 
> *you can refer to certain values of variables in certain observations 
> 
> use "$insurance", clear
> 
> sort reg_marks
> gen duplicate_reg=0
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n+1]
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n-1]
> 
> 
> 
> ********************************************************************************
> * egen (Extensions to generate)
> ********************************************************************************
> 
> use "$project_e", clear
> 
> gen total_score = (math_score + eng_score)
> 
> 
> *mean
> egen mean = mean(total_score)
> 
> *min
> egen min = min(total_score)
> *max
> egen max = max(total_score)
> 
> *median
> egen median = median(total_score)
> 
> 
> ********************************************************************************
> * bysort
> ********************************************************************************
> 
> /*
> It repeats the command for each group of observations for which the values of 
> the variables in varlist are the same.
> */
> 
> use "$project_e", clear
> 
> 
> bysort schoolcode: gen serial = _n
> gen total_score = (math_score + eng_score)
> 
> *calculate mean, median, min, max for each school
> 
> *mean
> bysort schoolcode: egen mean = mean(total_score)
> 
> *min
> bysort schoolcode: egen min = min(total_score)
> *max
> bysort schoolcode: egen max = max(total_score)
> 
> *median
> bysort schoolcode: egen median = median(total_score)
> 
> drop serial student_unique_id eng_score math_score total_score
> 
> duplicates drop
> 
> ********************************************************************************
> * recode, destring
> ********************************************************************************
> use "$project_educ", clear
> 
> /*
> Recode: 
> It changes the values of numeric variables according to the rules specified. 
> */
> 
> *we have a dummy variable for male but we want to include a dummy variable female
> *in our regression model. Using recode option
> 
> gen female=male
> recode female (1=0) (0=1) 
> tab male female
> 
> /*detring
> It converts variables in varlist from string to numeric
> */
> 
> *age is a string vartiable 
> destring(age), replace
> 
> 
> ********************************************************************************
> * Datasets commands: merge, append, reshape, cf 
> ********************************************************************************
> 
> /*
> *merge
>  merge joins corresponding observations from the dataset currently in memory 
>  (called the master dataset) with those from filename.dta (called the using 
>  dataset), matching on one or more key variables.  merge can perform match
>  merges (one-to-one, one-to-many, many-to-one, and many-to-many), which are 
>  often called 'joins' by database people.
>  */
> 
> 
> */
. global baseline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_baseline.dta"
. global endline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_endline.dta"
. 
. use "$baseline", clear
. 
. merge 1:1 student_id using "$endline"
. 
. *look at m:1, 1:m & m:m option
. 
. /*
> Append:
> append appends Stata-format datasets stored on disk to the end of the dataset 
> in memory. 
> */
. 
. use "$baseline", clear
. 
. append using "$endline"
. sort student_id
. 
. bysort student_id: egen baseline_score = max(total_M_B)
. bysort student_id: egen endline_score = max(total_M_E)
. 
. drop total*
. 
. 
. /*
> reshape
> It converts data from wide to long form and vice versa.
> */
. 
. *wide to long
. webuse reshape1, clear
. reshape long inc ue, i(id) j(year)
. 
. 
. *long to wide
.  reshape wide inc ue, i(id) j(year)
.  
.  
.  /*
>  cf:
>  It compares varlist of the dataset in memory (the master dataset) with the 
>  corresponding variables in filename (the using dataset)
>  */
.  
.  global raw "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance_raw.dta"
.  
.  use "$insurance", clear
.  
.  cf _all using "$raw"
.  
.  *verbose gives a detailed listing, by variable, of each observation that differs.
.  cf _all using "$raw", verbose
.  
.  
. 
. 
. capture log close //using capture in case we didn't start the log
. 
. 
. 
. 
. {err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:35:54{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
.         
.         display "Hello, World"
. 
. log close
. 
. 
. * Approach 2 (use globals)
. 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. /*
> Capture:
> capture executes command, suppressing all its output (including error messages, if any) 
> */
. 
. *Approach 3 (use capture & globals)
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. capture log close
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. 
. 
. 
. *Aproach 4 (use capture, globals AND c-class values)
. 
. 
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. log using "$log", replace
. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
. 
. use "$project_e", clear
. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
. replace mq10_new = "" if regexm(mq10,"pm")
. replace mq10_new = "" if regexm(mq10,"p.m")
. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
. use "$project_t", clear
. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
.                 
.                 use "$popdensity", clear
. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
.                 replace departement="sandegue" if departement=="sangue"
.                 replace departement="sassandra" if departement=="dusassandra"
. 
.                 rename POPULATION population
.                 rename SUPERFICIEKM2 areasqkm
.                 rename DENSITEAUKM pop_density
. 
.                 save "$temp1", replace
. 
.                 use "$section0", clear
. 
.                 decode b06_departemen, gen(departement)
. 
.                 merge m:1 departement using "$temp1"
.                 /*
>                         Result                           # of obs.
>                         -----------------------------------------
>                         not matched                             1
>                                 from master                         0  (_merge==1)
>                                 from using                          1  (_merge==2)
> 
>                         matched                            12,899  (_merge==3)
>                         -----------------------------------------
>                 */
.                 drop if _merge==2 //dropping the extra department from pop_density file
. 
.                 summ _merge
.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
. 
. *************
. 
. /*
> Assert:
> It verifies that exp is true.  If it is true, the command produces no output.  
> If it is not true, assert informs you that the "assertion is false" and issues a
> return code of 9
> */
. 
. 
. *****************************
. *Approximate String Matching:
. *****************************
. *In a lot of cases we can't use merge/data cleaning and have to rely on 
. *fuzzy matching.
. 
. *Example: Tanzania Election data:
. *Issue: We have election data from 1995, 2000, 2005, 2010 and 2015. We want to 
. *match politicians who ran in multiple elections.
. 
. global election "gui2de STATA Tutorials/Session 3/Data/Tanzania_Election.dta"
. global temp_95 "gui2de STATA Tutorials/Session 3/Data/temp_1995.dta"
. global temp_00 "gui2de STATA Tutorials/Session 3/Data/temp_2000.dta"
. 
. 
. use "$election"
. 
. 
. preserve
.         keep if year==1995
.         keep serial candidate
.         save "$temp_95", replace //1222 obs
. restore
. 
. preserve
.         keep if year==2000
.         keep serial candidate
.         save "$temp_00", replace //1222 obs
. restore
. 
. 
. use "$temp_95", clear
. 
. *match 2000 to 1995 data set
. matchit serial candidate using "$temp_00", idusing(serial) txtusing(candidate)
. end
. keep if similscore>=0.63 //Jessica's idea
. 
. *sort by 1995 serial number, keep only best match 
. gsort serial -similscore
. duplicates drop serial, force
. gsort -similscore
. *sort by 2000 serial number, keep only best match
. gsort serial1 -similscore
. duplicates drop serial1, force
. gsort -similscore
. 
. 
. 
. 
. 
. 
. 
. /*
> You should be able to Your do file should be 
> 
> 
> ********local Vs Global*************
> 
> /*
> local:
> Local macros are only visible locally, meaning within
> the same program, do file, do-file editor contents or interactive
> session
> */
> 
> /*
> global:
> Global macros are visible everywhere, or globally, meaning within any program, 
> do file, or do-file editor contents and within an interactive session.  
> */
> 
> /*
> The difference between local and global macros is that local macros are private 
> and global macros
> are public
> */
> 
> *Example
> 
> global X "Apples"
> display "$X"
> 
> local X "Apples"
> display "`X'"
> 
> *run line 56 & 57 together and then separately. Notice the difference! 
> 
> 
> *Example (Global)
> 
>         global wd "C:/Users/ah1152/Box Sync/"
>         *NOTE: Change ^^^THIS^^^
> 
>         use "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance", clear
> 
>         *OR I can define another global for the dataset:
>         clear
>         global insurance "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance"
>         global project_t "$wd/gui2de STATA Tutorials/Session 2/Data/project_t"
>         global project_e "$wd/gui2de STATA Tutorials/Session 2/Data/project_e"
>         global project_educ "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ"
>         
>         *load insurance data
>         use "$insurance", clear
>         
>         *load project T data
>         use "$project_t", clear
>         
> 
> *Example (local)
> 
>         regress vin1q1_yes treat_makutano treat_mil treat_makutano_amt  treat_mil_amt age_in_years age_square secondaryschool wealth_index employed married television membership election_dummy , cluster(circlecode) 
> 
>         ****running the same regression useing locals
>         *Set locals for independent variables
>         local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                 
>         *Set locals for constants
>         local controls age_in_years age_square secondaryschool wealth_index ///
>                 employed married television membership election_dummy
>         
>         reg vin1q1_yes `treatment' `controls', cluster(circlecode) 
> 
> 
> 
>  ********************************************************************************
> * LoopsL foreach & forvalues
> ********************************************************************************
> 
> /*
> *foreach:
> foreach repeatedly sets local macro lname to each element of the list and executes
> the commands enclosed in braces.  The loop is executed zero or more times; it is 
> executed zero times if the list is null or empty.
> */
> 
> *Example 1:
> 
>         foreach alphabet in a b c d e f g h i j k l m n o p q r s t u v x y z {c -(}
>         display "`alphabet'"
>         {c )-}
> *
> *Example 2:
> 
>         use "$project_t", clear
>         *add "b_" prefix 
>         foreach x in circlecode treatment age_in_years treat_makutano treat_mil ///
>         treat_makutano_amt treat_mil_amt age_square secondaryschool wealth_index employed ///
>          married television membership election_dummy vin1q1_yes vin1q2_yes vin1q3_yes ///
>          vin1q4_yes {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
>          *using wildcard options
>          use "$project_t", clear
>          foreach x in * {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
> *Example 3:
> use "$project_t", clear
> 
>         foreach dep_var in vin1q1_yes vin1q2_yes vin1q3_yes vin1q4_yes{c -(}
> 
>                 *Set locals for independent variables
>                 local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                         
>                 *Set locals for constants
>                 local controls age_in_years age_square secondaryschool wealth_index ///
>                         employed married television membership election_dummy
>                 
>                 reg `dep_var' `treatment' `controls', cluster(circlecode) 
> {c )-}
> *
> 
> 
> /*
> forvalues:
> forvalues repeatedly sets local macro lname to each element of range and executes
> the commands enclosed in braces.  The loop is executed zero or more times.
> */
> 
> *Example 1:
>         forvalues i=1/20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 2:
>         forvalues i=1 (2) 20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 3 (calculating duration for each insurance plan
> use "$insurance", clear
> gen     policy_duration1 = expirydate1 - startdate1
> gen     policy_duration2 = expirydate2 - startdate2
> gen     policy_duration3 = expirydate3 - startdate3
> gen     policy_duration4 = expirydate4 - startdate4
> gen     policy_duration5 = expirydate5 - startdate5
> 
> /*
>         "RULE OF THREE" (code duplication)
> "You are allowed to copy and paste the code once, but that when the same code is 
> replicated three times, it should be extracted into a new procedure.
> 
> Duplication in programming is almost always in indication of poorly designed 
> code or poor coding habits. Duplication is a bad practice because it makes code 
> harder to maintain." 
> */
> 
> *We can use forvalues loop to generate these 5 variables
> use "$insurance", clear
> forvalues i= 1/5 {c -(}
> gen policy_duration`i' = (expirydate`i' - startdate`i')
> {c )-}
> *
> 
> ********************************************************************************
> * Indexing: Referring to observations, keeping, and dropping obs :
> ********************************************************************************
> 
> * _n refers to the number of the row 
> 
> use "$insurance", clear
> gen obsnum=_n 
> lab var obsnum "Observation number" 
> order obsnum, first 
> 
> 
> * writing _n refers to observations 
> list if _n<50 //will browse the first 49 observations 
> 
> *dropping and keeping 
> drop if _n>1000 
> keep if _n<=100 //will keep the first 100 observatiosn 
> 
> *you can refer to certain values of variables in certain observations 
> 
> use "$insurance", clear
> 
> sort reg_marks
> gen duplicate_reg=0
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n+1]
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n-1]
> 
> 
> 
> ********************************************************************************
> * egen (Extensions to generate)
> ********************************************************************************
> 
> use "$project_e", clear
> 
> gen total_score = (math_score + eng_score)
> 
> 
> *mean
> egen mean = mean(total_score)
> 
> *min
> egen min = min(total_score)
> *max
> egen max = max(total_score)
> 
> *median
> egen median = median(total_score)
> 
> 
> ********************************************************************************
> * bysort
> ********************************************************************************
> 
> /*
> It repeats the command for each group of observations for which the values of 
> the variables in varlist are the same.
> */
> 
> use "$project_e", clear
> 
> 
> bysort schoolcode: gen serial = _n
> gen total_score = (math_score + eng_score)
> 
> *calculate mean, median, min, max for each school
> 
> *mean
> bysort schoolcode: egen mean = mean(total_score)
> 
> *min
> bysort schoolcode: egen min = min(total_score)
> *max
> bysort schoolcode: egen max = max(total_score)
> 
> *median
> bysort schoolcode: egen median = median(total_score)
> 
> drop serial student_unique_id eng_score math_score total_score
> 
> duplicates drop
> 
> ********************************************************************************
> * recode, destring
> ********************************************************************************
> use "$project_educ", clear
> 
> /*
> Recode: 
> It changes the values of numeric variables according to the rules specified. 
> */
> 
> *we have a dummy variable for male but we want to include a dummy variable female
> *in our regression model. Using recode option
> 
> gen female=male
> recode female (1=0) (0=1) 
> tab male female
> 
> /*detring
> It converts variables in varlist from string to numeric
> */
> 
> *age is a string vartiable 
> destring(age), replace
> 
> 
> ********************************************************************************
> * Datasets commands: merge, append, reshape, cf 
> ********************************************************************************
> 
> /*
> *merge
>  merge joins corresponding observations from the dataset currently in memory 
>  (called the master dataset) with those from filename.dta (called the using 
>  dataset), matching on one or more key variables.  merge can perform match
>  merges (one-to-one, one-to-many, many-to-one, and many-to-many), which are 
>  often called 'joins' by database people.
>  */
> 
> 
> */
. global baseline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_baseline.dta"
. global endline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_endline.dta"
. 
. use "$baseline", clear
. 
. merge 1:1 student_id using "$endline"
. 
. *look at m:1, 1:m & m:m option
. 
. /*
> Append:
> append appends Stata-format datasets stored on disk to the end of the dataset 
> in memory. 
> */
. 
. use "$baseline", clear
. 
. append using "$endline"
. sort student_id
. 
. bysort student_id: egen baseline_score = max(total_M_B)
. bysort student_id: egen endline_score = max(total_M_E)
. 
. drop total*
. 
. 
. /*
> reshape
> It converts data from wide to long form and vice versa.
> */
. 
. *wide to long
. webuse reshape1, clear
. reshape long inc ue, i(id) j(year)
. 
. 
. *long to wide
.  reshape wide inc ue, i(id) j(year)
.  
.  
.  /*
>  cf:
>  It compares varlist of the dataset in memory (the master dataset) with the 
>  corresponding variables in filename (the using dataset)
>  */
.  
.  global raw "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance_raw.dta"
.  
.  use "$insurance", clear
.  
.  cf _all using "$raw"
.  
.  *verbose gives a detailed listing, by variable, of each observation that differs.
.  cf _all using "$raw", verbose
.  
.  
. 
. 
. capture log close //using capture in case we didn't start the log
. 
. 
. 
. 
. {err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:36:20{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
.         
.         display "Hello, World"
. 
. log close
. 
. 
. * Approach 2 (use globals)
. 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. /*
> Capture:
> capture executes command, suppressing all its output (including error messages, if any) 
> */
. 
. *Approach 3 (use capture & globals)
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. capture log close
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. 
. 
. 
. *Aproach 4 (use capture, globals AND c-class values)
. 
. 
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. log using "$log", replace
. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
. 
. use "$project_e", clear
. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
. replace mq10_new = "" if regexm(mq10,"pm")
. replace mq10_new = "" if regexm(mq10,"p.m")
. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
. use "$project_t", clear
. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
.                 
.                 use "$popdensity", clear
. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
.                 replace departement="sandegue" if departement=="sangue"
.                 replace departement="sassandra" if departement=="dusassandra"
. 
.                 rename POPULATION population
.                 rename SUPERFICIEKM2 areasqkm
.                 rename DENSITEAUKM pop_density
. 
.                 save "$temp1", replace
. 
.                 use "$section0", clear
. 
.                 decode b06_departemen, gen(departement)
. 
.                 merge m:1 departement using "$temp1"
.                 /*
>                         Result                           # of obs.
>                         -----------------------------------------
>                         not matched                             1
>                                 from master                         0  (_merge==1)
>                                 from using                          1  (_merge==2)
> 
>                         matched                            12,899  (_merge==3)
>                         -----------------------------------------
>                 */
.                 drop if _merge==2 //dropping the extra department from pop_density file
. 
.                 summ _merge
.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
. 
. *************
. 
. /*
> Assert:
> It verifies that exp is true.  If it is true, the command produces no output.  
> If it is not true, assert informs you that the "assertion is false" and issues a
> return code of 9
> */
. 
. 
. *****************************
. *Approximate String Matching:
. *****************************
. *In a lot of cases we can't use merge/data cleaning and have to rely on 
. *fuzzy matching.
. 
. *Example: Tanzania Election data:
. *Issue: We have election data from 1995, 2000, 2005, 2010 and 2015. We want to 
. *match politicians who ran in multiple elections.
. 
. global election "gui2de STATA Tutorials/Session 3/Data/Tanzania_Election.dta"
. global temp_95 "gui2de STATA Tutorials/Session 3/Data/temp_1995.dta"
. global temp_00 "gui2de STATA Tutorials/Session 3/Data/temp_2000.dta"
. 
. 
. use "$election"
. 
. 
. preserve
.         keep if year==1995
.         keep serial candidate
.         save "$temp_95", replace //1222 obs
. restore
. 
. preserve
.         keep if year==2000
.         keep serial candidate
.         save "$temp_00", replace //1222 obs
. restore
. 
. 
. use "$temp_95", clear
. 
. *match 2000 to 1995 data set
. matchit serial candidate using "$temp_00", idusing(serial) txtusing(candidate)
. end
. keep if similscore>=0.63 //Jessica's idea
. 
. *sort by 1995 serial number, keep only best match 
. gsort serial -similscore
. duplicates drop serial, force
. gsort -similscore
. *sort by 2000 serial number, keep only best match
. gsort serial1 -similscore
. duplicates drop serial1, force
. gsort -similscore
. 
. 
. 
. 
. 
. 
. 
. /*
> You should be able to Your do file should be 
> 
> 
> ********local Vs Global*************
> 
> /*
> local:
> Local macros are only visible locally, meaning within
> the same program, do file, do-file editor contents or interactive
> session
> */
> 
> /*
> global:
> Global macros are visible everywhere, or globally, meaning within any program, 
> do file, or do-file editor contents and within an interactive session.  
> */
> 
> /*
> The difference between local and global macros is that local macros are private 
> and global macros
> are public
> */
> 
> *Example
> 
> global X "Apples"
> display "$X"
> 
> local X "Apples"
> display "`X'"
> 
> *run line 56 & 57 together and then separately. Notice the difference! 
> 
> 
> *Example (Global)
> 
>         global wd "C:/Users/ah1152/Box Sync/"
>         *NOTE: Change ^^^THIS^^^
> 
>         use "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance", clear
> 
>         *OR I can define another global for the dataset:
>         clear
>         global insurance "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance"
>         global project_t "$wd/gui2de STATA Tutorials/Session 2/Data/project_t"
>         global project_e "$wd/gui2de STATA Tutorials/Session 2/Data/project_e"
>         global project_educ "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ"
>         
>         *load insurance data
>         use "$insurance", clear
>         
>         *load project T data
>         use "$project_t", clear
>         
> 
> *Example (local)
> 
>         regress vin1q1_yes treat_makutano treat_mil treat_makutano_amt  treat_mil_amt age_in_years age_square secondaryschool wealth_index employed married television membership election_dummy , cluster(circlecode) 
> 
>         ****running the same regression useing locals
>         *Set locals for independent variables
>         local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                 
>         *Set locals for constants
>         local controls age_in_years age_square secondaryschool wealth_index ///
>                 employed married television membership election_dummy
>         
>         reg vin1q1_yes `treatment' `controls', cluster(circlecode) 
> 
> 
> 
>  ********************************************************************************
> * LoopsL foreach & forvalues
> ********************************************************************************
> 
> /*
> *foreach:
> foreach repeatedly sets local macro lname to each element of the list and executes
> the commands enclosed in braces.  The loop is executed zero or more times; it is 
> executed zero times if the list is null or empty.
> */
> 
> *Example 1:
> 
>         foreach alphabet in a b c d e f g h i j k l m n o p q r s t u v x y z {c -(}
>         display "`alphabet'"
>         {c )-}
> *
> *Example 2:
> 
>         use "$project_t", clear
>         *add "b_" prefix 
>         foreach x in circlecode treatment age_in_years treat_makutano treat_mil ///
>         treat_makutano_amt treat_mil_amt age_square secondaryschool wealth_index employed ///
>          married television membership election_dummy vin1q1_yes vin1q2_yes vin1q3_yes ///
>          vin1q4_yes {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
>          *using wildcard options
>          use "$project_t", clear
>          foreach x in * {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
> *Example 3:
> use "$project_t", clear
> 
>         foreach dep_var in vin1q1_yes vin1q2_yes vin1q3_yes vin1q4_yes{c -(}
> 
>                 *Set locals for independent variables
>                 local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                         
>                 *Set locals for constants
>                 local controls age_in_years age_square secondaryschool wealth_index ///
>                         employed married television membership election_dummy
>                 
>                 reg `dep_var' `treatment' `controls', cluster(circlecode) 
> {c )-}
> *
> 
> 
> /*
> forvalues:
> forvalues repeatedly sets local macro lname to each element of range and executes
> the commands enclosed in braces.  The loop is executed zero or more times.
> */
> 
> *Example 1:
>         forvalues i=1/20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 2:
>         forvalues i=1 (2) 20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 3 (calculating duration for each insurance plan
> use "$insurance", clear
> gen     policy_duration1 = expirydate1 - startdate1
> gen     policy_duration2 = expirydate2 - startdate2
> gen     policy_duration3 = expirydate3 - startdate3
> gen     policy_duration4 = expirydate4 - startdate4
> gen     policy_duration5 = expirydate5 - startdate5
> 
> /*
>         "RULE OF THREE" (code duplication)
> "You are allowed to copy and paste the code once, but that when the same code is 
> replicated three times, it should be extracted into a new procedure.
> 
> Duplication in programming is almost always in indication of poorly designed 
> code or poor coding habits. Duplication is a bad practice because it makes code 
> harder to maintain." 
> */
> 
> *We can use forvalues loop to generate these 5 variables
> use "$insurance", clear
> forvalues i= 1/5 {c -(}
> gen policy_duration`i' = (expirydate`i' - startdate`i')
> {c )-}
> *
> 
> ********************************************************************************
> * Indexing: Referring to observations, keeping, and dropping obs :
> ********************************************************************************
> 
> * _n refers to the number of the row 
> 
> use "$insurance", clear
> gen obsnum=_n 
> lab var obsnum "Observation number" 
> order obsnum, first 
> 
> 
> * writing _n refers to observations 
> list if _n<50 //will browse the first 49 observations 
> 
> *dropping and keeping 
> drop if _n>1000 
> keep if _n<=100 //will keep the first 100 observatiosn 
> 
> *you can refer to certain values of variables in certain observations 
> 
> use "$insurance", clear
> 
> sort reg_marks
> gen duplicate_reg=0
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n+1]
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n-1]
> 
> 
> 
> ********************************************************************************
> * egen (Extensions to generate)
> ********************************************************************************
> 
> use "$project_e", clear
> 
> gen total_score = (math_score + eng_score)
> 
> 
> *mean
> egen mean = mean(total_score)
> 
> *min
> egen min = min(total_score)
> *max
> egen max = max(total_score)
> 
> *median
> egen median = median(total_score)
> 
> 
> ********************************************************************************
> * bysort
> ********************************************************************************
> 
> /*
> It repeats the command for each group of observations for which the values of 
> the variables in varlist are the same.
> */
> 
> use "$project_e", clear
> 
> 
> bysort schoolcode: gen serial = _n
> gen total_score = (math_score + eng_score)
> 
> *calculate mean, median, min, max for each school
> 
> *mean
> bysort schoolcode: egen mean = mean(total_score)
> 
> *min
> bysort schoolcode: egen min = min(total_score)
> *max
> bysort schoolcode: egen max = max(total_score)
> 
> *median
> bysort schoolcode: egen median = median(total_score)
> 
> drop serial student_unique_id eng_score math_score total_score
> 
> duplicates drop
> 
> ********************************************************************************
> * recode, destring
> ********************************************************************************
> use "$project_educ", clear
> 
> /*
> Recode: 
> It changes the values of numeric variables according to the rules specified. 
> */
> 
> *we have a dummy variable for male but we want to include a dummy variable female
> *in our regression model. Using recode option
> 
> gen female=male
> recode female (1=0) (0=1) 
> tab male female
> 
> /*detring
> It converts variables in varlist from string to numeric
> */
> 
> *age is a string vartiable 
> destring(age), replace
> 
> 
> ********************************************************************************
> * Datasets commands: merge, append, reshape, cf 
> ********************************************************************************
> 
> /*
> *merge
>  merge joins corresponding observations from the dataset currently in memory 
>  (called the master dataset) with those from filename.dta (called the using 
>  dataset), matching on one or more key variables.  merge can perform match
>  merges (one-to-one, one-to-many, many-to-one, and many-to-many), which are 
>  often called 'joins' by database people.
>  */
> 
> 
> */
. global baseline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_baseline.dta"
. global endline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_endline.dta"
. 
. use "$baseline", clear
. 
. merge 1:1 student_id using "$endline"
. 
. *look at m:1, 1:m & m:m option
. 
. /*
> Append:
> append appends Stata-format datasets stored on disk to the end of the dataset 
> in memory. 
> */
. 
. use "$baseline", clear
. 
. append using "$endline"
. sort student_id
. 
. bysort student_id: egen baseline_score = max(total_M_B)
. bysort student_id: egen endline_score = max(total_M_E)
. 
. drop total*
. 
. 
. /*
> reshape
> It converts data from wide to long form and vice versa.
> */
. 
. *wide to long
. webuse reshape1, clear
. reshape long inc ue, i(id) j(year)
. 
. 
. *long to wide
.  reshape wide inc ue, i(id) j(year)
.  
.  
.  /*
>  cf:
>  It compares varlist of the dataset in memory (the master dataset) with the 
>  corresponding variables in filename (the using dataset)
>  */
.  
.  global raw "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance_raw.dta"
.  
.  use "$insurance", clear
.  
.  cf _all using "$raw"
.  
.  *verbose gives a detailed listing, by variable, of each observation that differs.
.  cf _all using "$raw", verbose
.  
.  
. 
. 
. capture log close //using capture in case we didn't start the log
. 
. 
. 
. 
. {err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. do "C:\Users\ah1152\Documents\gui2de STATA tutorials\Session 3.do"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:36:49{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
.         
.         display "Hello, World"
. 
. log close
. 
. 
. * Approach 2 (use globals)
. 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. /*
> Capture:
> capture executes command, suppressing all its output (including error messages, if any) 
> */
. 
. *Approach 3 (use capture & globals)
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. capture log close
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. 
. 
. 
. *Aproach 4 (use capture, globals AND c-class values)
. 
. 
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. log using "$log", replace
. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
. 
. use "$project_e", clear
. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
. replace mq10_new = "" if regexm(mq10,"pm")
. replace mq10_new = "" if regexm(mq10,"p.m")
. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
. use "$project_t", clear
. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
.                 
.                 use "$popdensity", clear
. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
.                 replace departement="sandegue" if departement=="sangue"
.                 replace departement="sassandra" if departement=="dusassandra"
. 
.                 rename POPULATION population
.                 rename SUPERFICIEKM2 areasqkm
.                 rename DENSITEAUKM pop_density
. 
.                 save "$temp1", replace
. 
.                 use "$section0", clear
. 
.                 decode b06_departemen, gen(departement)
. 
.                 merge m:1 departement using "$temp1"
.                 /*
>                         Result                           # of obs.
>                         -----------------------------------------
>                         not matched                             1
>                                 from master                         0  (_merge==1)
>                                 from using                          1  (_merge==2)
> 
>                         matched                            12,899  (_merge==3)
>                         -----------------------------------------
>                 */
.                 drop if _merge==2 //dropping the extra department from pop_density file
. 
.                 summ _merge
.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
. 
. *************
. 
. /*
> Assert:
> It verifies that exp is true.  If it is true, the command produces no output.  
> If it is not true, assert informs you that the "assertion is false" and issues a
> return code of 9
> */
. 
. 
. *****************************
. *Approximate String Matching:
. *****************************
. *In a lot of cases we can't use merge/data cleaning and have to rely on 
. *fuzzy matching.
. 
. *Example: Tanzania Election data:
. *Issue: We have election data from 1995, 2000, 2005, 2010 and 2015. We want to 
. *match politicians who ran in multiple elections.
. 
. global election "gui2de STATA Tutorials/Session 3/Data/Tanzania_Election.dta"
. global temp_95 "gui2de STATA Tutorials/Session 3/Data/temp_1995.dta"
. global temp_00 "gui2de STATA Tutorials/Session 3/Data/temp_2000.dta"
. 
. 
. use "$election"
. 
. 
. preserve
.         keep if year==1995
.         keep serial candidate
.         save "$temp_95", replace //1222 obs
. restore
. 
. preserve
.         keep if year==2000
.         keep serial candidate
.         save "$temp_00", replace //1222 obs
. restore
. 
. 
. use "$temp_95", clear
. 
. *match 2000 to 1995 data set
. matchit serial candidate using "$temp_00", idusing(serial) txtusing(candidate)
. end
. keep if similscore>=0.63 //Jessica's idea
. 
. *sort by 1995 serial number, keep only best match 
. gsort serial -similscore
. duplicates drop serial, force
. gsort -similscore
. *sort by 2000 serial number, keep only best match
. gsort serial1 -similscore
. duplicates drop serial1, force
. gsort -similscore
. 
. 
. 
. 
. 
. 
. 
. /*
> You should be able to Your do file should be 
> 
> 
> ********local Vs Global*************
> 
> /*
> local:
> Local macros are only visible locally, meaning within
> the same program, do file, do-file editor contents or interactive
> session
> */
> 
> /*
> global:
> Global macros are visible everywhere, or globally, meaning within any program, 
> do file, or do-file editor contents and within an interactive session.  
> */
> 
> /*
> The difference between local and global macros is that local macros are private 
> and global macros
> are public
> */
> 
> *Example
> 
> global X "Apples"
> display "$X"
> 
> local X "Apples"
> display "`X'"
> 
> *run line 56 & 57 together and then separately. Notice the difference! 
> 
> 
> *Example (Global)
> 
>         global wd "C:/Users/ah1152/Box Sync/"
>         *NOTE: Change ^^^THIS^^^
> 
>         use "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance", clear
> 
>         *OR I can define another global for the dataset:
>         clear
>         global insurance "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance"
>         global project_t "$wd/gui2de STATA Tutorials/Session 2/Data/project_t"
>         global project_e "$wd/gui2de STATA Tutorials/Session 2/Data/project_e"
>         global project_educ "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ"
>         
>         *load insurance data
>         use "$insurance", clear
>         
>         *load project T data
>         use "$project_t", clear
>         
> 
> *Example (local)
> 
>         regress vin1q1_yes treat_makutano treat_mil treat_makutano_amt  treat_mil_amt age_in_years age_square secondaryschool wealth_index employed married television membership election_dummy , cluster(circlecode) 
> 
>         ****running the same regression useing locals
>         *Set locals for independent variables
>         local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                 
>         *Set locals for constants
>         local controls age_in_years age_square secondaryschool wealth_index ///
>                 employed married television membership election_dummy
>         
>         reg vin1q1_yes `treatment' `controls', cluster(circlecode) 
> 
> 
> 
>  ********************************************************************************
> * LoopsL foreach & forvalues
> ********************************************************************************
> 
> /*
> *foreach:
> foreach repeatedly sets local macro lname to each element of the list and executes
> the commands enclosed in braces.  The loop is executed zero or more times; it is 
> executed zero times if the list is null or empty.
> */
> 
> *Example 1:
> 
>         foreach alphabet in a b c d e f g h i j k l m n o p q r s t u v x y z {c -(}
>         display "`alphabet'"
>         {c )-}
> *
> *Example 2:
> 
>         use "$project_t", clear
>         *add "b_" prefix 
>         foreach x in circlecode treatment age_in_years treat_makutano treat_mil ///
>         treat_makutano_amt treat_mil_amt age_square secondaryschool wealth_index employed ///
>          married television membership election_dummy vin1q1_yes vin1q2_yes vin1q3_yes ///
>          vin1q4_yes {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
>          *using wildcard options
>          use "$project_t", clear
>          foreach x in * {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
> *Example 3:
> use "$project_t", clear
> 
>         foreach dep_var in vin1q1_yes vin1q2_yes vin1q3_yes vin1q4_yes{c -(}
> 
>                 *Set locals for independent variables
>                 local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                         
>                 *Set locals for constants
>                 local controls age_in_years age_square secondaryschool wealth_index ///
>                         employed married television membership election_dummy
>                 
>                 reg `dep_var' `treatment' `controls', cluster(circlecode) 
> {c )-}
> *
> 
> 
> /*
> forvalues:
> forvalues repeatedly sets local macro lname to each element of range and executes
> the commands enclosed in braces.  The loop is executed zero or more times.
> */
> 
> *Example 1:
>         forvalues i=1/20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 2:
>         forvalues i=1 (2) 20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 3 (calculating duration for each insurance plan
> use "$insurance", clear
> gen     policy_duration1 = expirydate1 - startdate1
> gen     policy_duration2 = expirydate2 - startdate2
> gen     policy_duration3 = expirydate3 - startdate3
> gen     policy_duration4 = expirydate4 - startdate4
> gen     policy_duration5 = expirydate5 - startdate5
> 
> /*
>         "RULE OF THREE" (code duplication)
> "You are allowed to copy and paste the code once, but that when the same code is 
> replicated three times, it should be extracted into a new procedure.
> 
> Duplication in programming is almost always in indication of poorly designed 
> code or poor coding habits. Duplication is a bad practice because it makes code 
> harder to maintain." 
> */
> 
> *We can use forvalues loop to generate these 5 variables
> use "$insurance", clear
> forvalues i= 1/5 {c -(}
> gen policy_duration`i' = (expirydate`i' - startdate`i')
> {c )-}
> *
> 
> ********************************************************************************
> * Indexing: Referring to observations, keeping, and dropping obs :
> ********************************************************************************
> 
> * _n refers to the number of the row 
> 
> use "$insurance", clear
> gen obsnum=_n 
> lab var obsnum "Observation number" 
> order obsnum, first 
> 
> 
> * writing _n refers to observations 
> list if _n<50 //will browse the first 49 observations 
> 
> *dropping and keeping 
> drop if _n>1000 
> keep if _n<=100 //will keep the first 100 observatiosn 
> 
> *you can refer to certain values of variables in certain observations 
> 
> use "$insurance", clear
> 
> sort reg_marks
> gen duplicate_reg=0
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n+1]
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n-1]
> 
> 
> 
> ********************************************************************************
> * egen (Extensions to generate)
> ********************************************************************************
> 
> use "$project_e", clear
> 
> gen total_score = (math_score + eng_score)
> 
> 
> *mean
> egen mean = mean(total_score)
> 
> *min
> egen min = min(total_score)
> *max
> egen max = max(total_score)
> 
> *median
> egen median = median(total_score)
> 
> 
> ********************************************************************************
> * bysort
> ********************************************************************************
> 
> /*
> It repeats the command for each group of observations for which the values of 
> the variables in varlist are the same.
> */
> 
> use "$project_e", clear
> 
> 
> bysort schoolcode: gen serial = _n
> gen total_score = (math_score + eng_score)
> 
> *calculate mean, median, min, max for each school
> 
> *mean
> bysort schoolcode: egen mean = mean(total_score)
> 
> *min
> bysort schoolcode: egen min = min(total_score)
> *max
> bysort schoolcode: egen max = max(total_score)
> 
> *median
> bysort schoolcode: egen median = median(total_score)
> 
> drop serial student_unique_id eng_score math_score total_score
> 
> duplicates drop
> 
> ********************************************************************************
> * recode, destring
> ********************************************************************************
> use "$project_educ", clear
> 
> /*
> Recode: 
> It changes the values of numeric variables according to the rules specified. 
> */
> 
> *we have a dummy variable for male but we want to include a dummy variable female
> *in our regression model. Using recode option
> 
> gen female=male
> recode female (1=0) (0=1) 
> tab male female
> 
> /*detring
> It converts variables in varlist from string to numeric
> */
> 
> *age is a string vartiable 
> destring(age), replace
> 
> 
> ********************************************************************************
> * Datasets commands: merge, append, reshape, cf 
> ********************************************************************************
> 
> /*
> *merge
>  merge joins corresponding observations from the dataset currently in memory 
>  (called the master dataset) with those from filename.dta (called the using 
>  dataset), matching on one or more key variables.  merge can perform match
>  merges (one-to-one, one-to-many, many-to-one, and many-to-many), which are 
>  often called 'joins' by database people.
>  */
> 
> 
> */
. global baseline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_baseline.dta"
. global endline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_endline.dta"
. 
. use "$baseline", clear
. 
. merge 1:1 student_id using "$endline"
. 
. *look at m:1, 1:m & m:m option
. 
. /*
> Append:
> append appends Stata-format datasets stored on disk to the end of the dataset 
> in memory. 
> */
. 
. use "$baseline", clear
. 
. append using "$endline"
. sort student_id
. 
. bysort student_id: egen baseline_score = max(total_M_B)
. bysort student_id: egen endline_score = max(total_M_E)
. 
. drop total*
. 
. 
. /*
> reshape
> It converts data from wide to long form and vice versa.
> */
. 
. *wide to long
. webuse reshape1, clear
. reshape long inc ue, i(id) j(year)
. 
. 
. *long to wide
.  reshape wide inc ue, i(id) j(year)
.  
.  
.  /*
>  cf:
>  It compares varlist of the dataset in memory (the master dataset) with the 
>  corresponding variables in filename (the using dataset)
>  */
.  
.  global raw "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance_raw.dta"
.  
.  use "$insurance", clear
.  
.  cf _all using "$raw"
.  
.  *verbose gives a detailed listing, by variable, of each observation that differs.
.  cf _all using "$raw", verbose
.  
.  
. 
. 
. capture log close //using capture in case we didn't start the log
. 
. 
. 
. 
. {err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:37:23{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
.         
.         display "Hello, World"
. 
. log close
. 
. 
. * Approach 2 (use globals)
. 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. /*
> Capture:
> capture executes command, suppressing all its output (including error messages, if any) 
> */
. 
. *Approach 3 (use capture & globals)
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. capture log close
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. 
. 
. 
. *Aproach 4 (use capture, globals AND c-class values)
. 
. 
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. log using "$log", replace
. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
. 
. use "$project_e", clear
. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
. replace mq10_new = "" if regexm(mq10,"pm")
. replace mq10_new = "" if regexm(mq10,"p.m")
. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
. use "$project_t", clear
. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
.                 
.                 use "$popdensity", clear
. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
.                 replace departement="sandegue" if departement=="sangue"
.                 replace departement="sassandra" if departement=="dusassandra"
. 
.                 rename POPULATION population
.                 rename SUPERFICIEKM2 areasqkm
.                 rename DENSITEAUKM pop_density
. 
.                 save "$temp1", replace
. 
.                 use "$section0", clear
. 
.                 decode b06_departemen, gen(departement)
. 
.                 merge m:1 departement using "$temp1"
.                 /*
>                         Result                           # of obs.
>                         -----------------------------------------
>                         not matched                             1
>                                 from master                         0  (_merge==1)
>                                 from using                          1  (_merge==2)
> 
>                         matched                            12,899  (_merge==3)
>                         -----------------------------------------
>                 */
.                 drop if _merge==2 //dropping the extra department from pop_density file
. 
.                 summ _merge
.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
. 
. *************
. 
. /*
> Assert:
> It verifies that exp is true.  If it is true, the command produces no output.  
> If it is not true, assert informs you that the "assertion is false" and issues a
> return code of 9
> */
. 
. 
. *****************************
. *Approximate String Matching:
. *****************************
. *In a lot of cases we can't use merge/data cleaning and have to rely on 
. *fuzzy matching.
. 
. *Example: Tanzania Election data:
. *Issue: We have election data from 1995, 2000, 2005, 2010 and 2015. We want to 
. *match politicians who ran in multiple elections.
. 
. global election "gui2de STATA Tutorials/Session 3/Data/Tanzania_Election.dta"
. global temp_95 "gui2de STATA Tutorials/Session 3/Data/temp_1995.dta"
. global temp_00 "gui2de STATA Tutorials/Session 3/Data/temp_2000.dta"
. 
. 
. use "$election"
. 
. 
. preserve
.         keep if year==1995
.         keep serial candidate
.         save "$temp_95", replace //1222 obs
. restore
. 
. preserve
.         keep if year==2000
.         keep serial candidate
.         save "$temp_00", replace //1222 obs
. restore
. 
. 
. use "$temp_95", clear
. 
. *match 2000 to 1995 data set
. matchit serial candidate using "$temp_00", idusing(serial) txtusing(candidate)
. 
. end
. 
. keep if similscore>=0.63 //Jessica's idea
. 
. *sort by 1995 serial number, keep only best match 
. gsort serial -similscore
. duplicates drop serial, force
. gsort -similscore
. *sort by 2000 serial number, keep only best match
. gsort serial1 -similscore
. duplicates drop serial1, force
. gsort -similscore
. 
. 
. 
. 
. /*
> 
> 
> /*
> You should be able to Your do file should be 
> 
> 
> ********local Vs Global*************
> 
> /*
> local:
> Local macros are only visible locally, meaning within
> the same program, do file, do-file editor contents or interactive
> session
> */
> 
> /*
> global:
> Global macros are visible everywhere, or globally, meaning within any program, 
> do file, or do-file editor contents and within an interactive session.  
> */
> 
> /*
> The difference between local and global macros is that local macros are private 
> and global macros
> are public
> */
> 
> *Example
> 
> global X "Apples"
> display "$X"
> 
> local X "Apples"
> display "`X'"
> 
> *run line 56 & 57 together and then separately. Notice the difference! 
> 
> 
> *Example (Global)
> 
>         global wd "C:/Users/ah1152/Box Sync/"
>         *NOTE: Change ^^^THIS^^^
> 
>         use "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance", clear
> 
>         *OR I can define another global for the dataset:
>         clear
>         global insurance "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance"
>         global project_t "$wd/gui2de STATA Tutorials/Session 2/Data/project_t"
>         global project_e "$wd/gui2de STATA Tutorials/Session 2/Data/project_e"
>         global project_educ "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ"
>         
>         *load insurance data
>         use "$insurance", clear
>         
>         *load project T data
>         use "$project_t", clear
>         
> 
> *Example (local)
> 
>         regress vin1q1_yes treat_makutano treat_mil treat_makutano_amt  treat_mil_amt age_in_years age_square secondaryschool wealth_index employed married television membership election_dummy , cluster(circlecode) 
> 
>         ****running the same regression useing locals
>         *Set locals for independent variables
>         local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                 
>         *Set locals for constants
>         local controls age_in_years age_square secondaryschool wealth_index ///
>                 employed married television membership election_dummy
>         
>         reg vin1q1_yes `treatment' `controls', cluster(circlecode) 
> 
> 
> 
>  ********************************************************************************
> * LoopsL foreach & forvalues
> ********************************************************************************
> 
> /*
> *foreach:
> foreach repeatedly sets local macro lname to each element of the list and executes
> the commands enclosed in braces.  The loop is executed zero or more times; it is 
> executed zero times if the list is null or empty.
> */
> 
> *Example 1:
> 
>         foreach alphabet in a b c d e f g h i j k l m n o p q r s t u v x y z {c -(}
>         display "`alphabet'"
>         {c )-}
> *
> *Example 2:
> 
>         use "$project_t", clear
>         *add "b_" prefix 
>         foreach x in circlecode treatment age_in_years treat_makutano treat_mil ///
>         treat_makutano_amt treat_mil_amt age_square secondaryschool wealth_index employed ///
>          married television membership election_dummy vin1q1_yes vin1q2_yes vin1q3_yes ///
>          vin1q4_yes {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
>          *using wildcard options
>          use "$project_t", clear
>          foreach x in * {c -(}
>          rename `x' b_`x'
>          {c )-}
> *        
> *Example 3:
> use "$project_t", clear
> 
>         foreach dep_var in vin1q1_yes vin1q2_yes vin1q3_yes vin1q4_yes{c -(}
> 
>                 *Set locals for independent variables
>                 local treatment treat_makutano treat_mil treat_makutano_amt  treat_mil_amt
>                         
>                 *Set locals for constants
>                 local controls age_in_years age_square secondaryschool wealth_index ///
>                         employed married television membership election_dummy
>                 
>                 reg `dep_var' `treatment' `controls', cluster(circlecode) 
> {c )-}
> *
> 
> 
> /*
> forvalues:
> forvalues repeatedly sets local macro lname to each element of range and executes
> the commands enclosed in braces.  The loop is executed zero or more times.
> */
> 
> *Example 1:
>         forvalues i=1/20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 2:
>         forvalues i=1 (2) 20{c -(}
>         display `i'
>         {c )-}
> *
> 
> *Example 3 (calculating duration for each insurance plan
> use "$insurance", clear
> gen     policy_duration1 = expirydate1 - startdate1
> gen     policy_duration2 = expirydate2 - startdate2
> gen     policy_duration3 = expirydate3 - startdate3
> gen     policy_duration4 = expirydate4 - startdate4
> gen     policy_duration5 = expirydate5 - startdate5
> 
> /*
>         "RULE OF THREE" (code duplication)
> "You are allowed to copy and paste the code once, but that when the same code is 
> replicated three times, it should be extracted into a new procedure.
> 
> Duplication in programming is almost always in indication of poorly designed 
> code or poor coding habits. Duplication is a bad practice because it makes code 
> harder to maintain." 
> */
> 
> *We can use forvalues loop to generate these 5 variables
> use "$insurance", clear
> forvalues i= 1/5 {c -(}
> gen policy_duration`i' = (expirydate`i' - startdate`i')
> {c )-}
> *
> 
> ********************************************************************************
> * Indexing: Referring to observations, keeping, and dropping obs :
> ********************************************************************************
> 
> * _n refers to the number of the row 
> 
> use "$insurance", clear
> gen obsnum=_n 
> lab var obsnum "Observation number" 
> order obsnum, first 
> 
> 
> * writing _n refers to observations 
> list if _n<50 //will browse the first 49 observations 
> 
> *dropping and keeping 
> drop if _n>1000 
> keep if _n<=100 //will keep the first 100 observatiosn 
> 
> *you can refer to certain values of variables in certain observations 
> 
> use "$insurance", clear
> 
> sort reg_marks
> gen duplicate_reg=0
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n+1]
> replace duplicate_reg=1 if  reg_marks[_n]==reg_marks[_n-1]
> 
> 
> 
> ********************************************************************************
> * egen (Extensions to generate)
> ********************************************************************************
> 
> use "$project_e", clear
> 
> gen total_score = (math_score + eng_score)
> 
> 
> *mean
> egen mean = mean(total_score)
> 
> *min
> egen min = min(total_score)
> *max
> egen max = max(total_score)
> 
> *median
> egen median = median(total_score)
> 
> 
> ********************************************************************************
> * bysort
> ********************************************************************************
> 
> /*
> It repeats the command for each group of observations for which the values of 
> the variables in varlist are the same.
> */
> 
> use "$project_e", clear
> 
> 
> bysort schoolcode: gen serial = _n
> gen total_score = (math_score + eng_score)
> 
> *calculate mean, median, min, max for each school
> 
> *mean
> bysort schoolcode: egen mean = mean(total_score)
> 
> *min
> bysort schoolcode: egen min = min(total_score)
> *max
> bysort schoolcode: egen max = max(total_score)
> 
> *median
> bysort schoolcode: egen median = median(total_score)
> 
> drop serial student_unique_id eng_score math_score total_score
> 
> duplicates drop
> 
> ********************************************************************************
> * recode, destring
> ********************************************************************************
> use "$project_educ", clear
> 
> /*
> Recode: 
> It changes the values of numeric variables according to the rules specified. 
> */
> 
> *we have a dummy variable for male but we want to include a dummy variable female
> *in our regression model. Using recode option
> 
> gen female=male
> recode female (1=0) (0=1) 
> tab male female
> 
> /*detring
> It converts variables in varlist from string to numeric
> */
> 
> *age is a string vartiable 
> destring(age), replace
> 
> 
> ********************************************************************************
> * Datasets commands: merge, append, reshape, cf 
> ********************************************************************************
> 
> /*
> *merge
>  merge joins corresponding observations from the dataset currently in memory 
>  (called the master dataset) with those from filename.dta (called the using 
>  dataset), matching on one or more key variables.  merge can perform match
>  merges (one-to-one, one-to-many, many-to-one, and many-to-many), which are 
>  often called 'joins' by database people.
>  */
> 
> 
> */
> global baseline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_baseline.dta"
> global endline "$wd/gui2de STATA Tutorials/Session 2/Data/project_educ_endline.dta"
> 
> use "$baseline", clear
> 
> merge 1:1 student_id using "$endline"
> 
> *look at m:1, 1:m & m:m option
> 
> /*
> Append:
> append appends Stata-format datasets stored on disk to the end of the dataset 
> in memory. 
> */
> 
> use "$baseline", clear
> 
> append using "$endline"
> sort student_id
> 
> bysort student_id: egen baseline_score = max(total_M_B)
> bysort student_id: egen endline_score = max(total_M_E)
> 
> drop total*
> 
> 
> /*
> reshape
> It converts data from wide to long form and vice versa.
> */
> 
> *wide to long
> webuse reshape1, clear
> reshape long inc ue, i(id) j(year)
> 
> 
> *long to wide
>  reshape wide inc ue, i(id) j(year)
>  
>  
>  /*
>  cf:
>  It compares varlist of the dataset in memory (the master dataset) with the 
>  corresponding variables in filename (the using dataset)
>  */
>  
>  global raw "$wd/gui2de STATA Tutorials/Session 2/Data/car_insurance_raw.dta"
>  
>  use "$insurance", clear
>  
>  cf _all using "$raw"
>  
>  *verbose gives a detailed listing, by variable, of each observation that differs.
>  cf _all using "$raw", verbose
>  
>  
> 
> 
> capture log close //using capture in case we didn't start the log
> 
> 
> 
> 
{err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:37:31{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
.         
.         display "Hello, World"
. 
. log close
. 
. 
. * Approach 2 (use globals)
. 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. /*
> Capture:
> capture executes command, suppressing all its output (including error messages, if any) 
> */
. 
. *Approach 3 (use capture & globals)
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH"
. capture log close
. log using "$log", replace
. 
.         display "Hello, World"
. 
. log close
. 
. 
. 
. 
. *Aproach 4 (use capture, globals AND c-class values)
. 
. 
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. log using "$log", replace
. 
. *
. 
. 
. 
. 
. *Approach 5 ( use capture, globals, c-class values AND local switch it turn it on/off)
. local start_log "On"
. if "`start_log'" == "Off" {c -(}
. capture log close //in case log is already open
. *Use c class variables to automatically include date/time/username in the log file name
. local date: di %tdCCYY.NN.DD date(c(current_date),"DMY")
. local date: subinstr local date "." "", all
. local time: di %tchham Clock(c(current_time),"hms")
. local time: subinstr local time " " "", all
. *defining log names using date and time 
. global log "gui2de STATA Tutorials/Session 3/Logs/session3_`date'_`time'_`c(username)'.smcl"
. 
. log using "$log", replace
. {c )-}
. *
. 
. 
. *******************************************************************************
. *Important resources on how to deal with date/time:
. {c -(}
. /*
> http://www.stata.com/manuals13/u24.pdf
> http://www.stata.com/manuals13/ddatetimetranslation.pdf#ddatetimetranslation
> http://www.stata.com/manuals13/ddatetime.pdf#ddatetime
> http://www.stata.com/manuals13/ddatetimebusinesscalendars.pdf#ddatetimebusinesscalendars
> */
. {c )-}
. *
. 
. ********************************************************************************
. *2 STRING VARIABLES: Fuzzy Matching (and regexm)
. ********************************************************************************
. 
. /*
> regexm(s,re)
> performs a match of a regular expression and evaluates to 1 if regular 
> expression re is satisfied by the ASCII string s; otherwise, 0
> */
. 
. 
. *Example1:
. global project_e "gui2de STATA Tutorials/Session 3/Data/project_u.dta"
. 
. use "$project_e", clear
. 
. *correct answer is 7:25 am for mq10
. 
. gen mq10_new =""
. replace mq10_new = "7:25am" if regexm(mq10,"7:25")
. replace mq10_new = "7:25am" if regexm(mq10,"7hrs")
. replace mq10_new = "7:25am" if regexm(mq10,"7.25") | regexm(mq10,"725")
. replace mq10_new = "" if regexm(mq10,"pm")
. replace mq10_new = "" if regexm(mq10,"p.m")
. *example:
. 
. 
. *Example2:
. global project_t "gui2de STATA Tutorials/Session 3/Data/project_t.dta" 
. use "$project_t", clear
. 
. *registration number for vehicles registered in Tanzania should look like:
. * regnum = T123ABC
. gen correct_regnum = regexm(regnum,"^T[0-9][0-9][0-9][A-Z][A-Z][A-Z]$")
. 
. 
. *****************************
. *Approximate String Matching: 
. *****************************
. 
. 
. /*
> Approximate String Matching: 
> Fuzzy String Matching is basically rephrasing the YES/NO “Are string A and 
> string B the same?” as “How similar are string A and string B?”
> */
. 
. *there are a lot of STATA commands for it: matchit, reclink, reclink2
. *but you can get better results by some data cleaning + merge
. 
. *Example:
. 
.                 global popdensity "gui2de STATA Tutorials/Session 3/Data/CIV_populationdensity.dta"
.                 global section0  "gui2de STATA Tutorials/Session 3/Data/Section 0.dta" 
.                 global temp1 "gui2de STATA Tutorials/Session 3/Data/temp1.dta"
.                 
.                 use "$popdensity", clear
. 
.                 keep if regexm(NOMCIRCONSCRIPTION, "DEPARTEMENT")==1
.                 //keeping only "Departement" names. I am assuming that all departments have 
.                 //"departement" in their names. We have 108 such observations
. 
.                 local removechars " " " "DEPARTEMENT" "DE" "D'" " " "
.                 foreach i of local removechars  {c -(}
{txt}  2{com}.                         replace NOMCIRCONSCRIPTION = subinstr(NOMCIRCONSCRIPTION,"`i'","",.)
{txt}  3{com}.                 {c )-}
.                 //removing "departement, de, d' and spaces from departement's names
. 
.                 replace NOMCIRCONSCRIPTION=lower(NOMCIRCONSCRIPTION)
.                 //lower case to match ENV format
.                 rename NOMCIRCONSCRIPTION departement
. 
.                 /*
>                 NOTE: There are 108 distinct departements in pop_density files and 107 in 
>                 ENV. Even after cleaning departement names, we can only match 104 names.
> 
>                 unmatched departements are due to different spellings, see below:
> 
>                 departement(ENV)    department (Pop_denssity)
>                 arrha                           arrah
>                 sandegue                        sangue
>                 sassandra                       dusassandra
>                                                         gbeleban    (NOT in ENV dataset, ignore it)
> 
>                 Changing the names of departements in pop-density file as we don't want to
>                 make any changes in ENV dataset
>                 */
. 
.                 replace departement="arrha" if departement=="arrah"
.                 replace departement="sandegue" if departement=="sangue"
.                 replace departement="sassandra" if departement=="dusassandra"
. 
.                 rename POPULATION population
.                 rename SUPERFICIEKM2 areasqkm
.                 rename DENSITEAUKM pop_density
. 
.                 save "$temp1", replace
. 
.                 use "$section0", clear
. 
.                 decode b06_departemen, gen(departement)
. 
.                 merge m:1 departement using "$temp1"
.                 /*
>                         Result                           # of obs.
>                         -----------------------------------------
>                         not matched                             1
>                                 from master                         0  (_merge==1)
>                                 from using                          1  (_merge==2)
> 
>                         matched                            12,899  (_merge==3)
>                         -----------------------------------------
>                 */
.                 drop if _merge==2 //dropping the extra department from pop_density file
. 
.                 summ _merge
.                 assert `r(N)'==12899 //Just to make sure we have the entire ENV dataset.
. 
. *************
. 
. /*
> Assert:
> It verifies that exp is true.  If it is true, the command produces no output.  
> If it is not true, assert informs you that the "assertion is false" and issues a
> return code of 9
> */
. 
. 
. *****************************
. *Approximate String Matching:
. *****************************
. *In a lot of cases we can't use merge/data cleaning and have to rely on 
. *fuzzy matching.
. 
. *Example: Tanzania Election data:
. *Issue: We have election data from 1995, 2000, 2005, 2010 and 2015. We want to 
. *match politicians who ran in multiple elections.
. 
. global election "gui2de STATA Tutorials/Session 3/Data/Tanzania_Election.dta"
. global temp_95 "gui2de STATA Tutorials/Session 3/Data/temp_1995.dta"
. global temp_00 "gui2de STATA Tutorials/Session 3/Data/temp_2000.dta"
. 
. 
. use "$election"
. 
. 
. preserve
.         keep if year==1995
.         keep serial candidate
.         save "$temp_95", replace //1222 obs
. restore
. 
. preserve
.         keep if year==2000
.         keep serial candidate
.         save "$temp_00", replace //1222 obs
. restore
. 
. 
. use "$temp_95", clear
. 
. *match 2000 to 1995 data set
. matchit serial candidate using "$temp_00", idusing(serial) txtusing(candidate)
. {err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. clear

. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************

{txt}end of do-file

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:38:14{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}on{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}.  (Windows)
{bf}{err}({sf} is not a valid command name
{txt}{search r(199), local:r(199);}

end of do-file

{search r(199), local:r(199);}

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. 
.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
. **
. 
. cd "$user"
. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
. 
. cd "$user"
. {err}program error:  matching close brace not found
{txt}{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}
{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:38:35{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. {c )-}
{txt}
{com}.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
{txt}
{com}. **
. 
. cd "$user"
{res}C:\Users\ah1152\Box Sync
{txt}
{com}. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
{txt}
{com}. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
{txt}
{com}. 
. cd "$user"
{res}C:\Users\ah1152\Box Sync
{txt}
{com}. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
{err}log file already open
{txt}{search r(604), local:r(604);}

end of do-file

{search r(604), local:r(604);}

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. set more off
{txt}
{com}. clear
{txt}
{com}. 
. /******************************************************************************
> 
> * gui2de STATA Tutorial: Session 2
> * Ali Hamza
> * Feb 10th, 2017
> 
> Topics:
> 
> 1.      Interoperability: c-class values.
> 
> 2.      String Variables: fuzzy matching (matchit, reclink, reclink2), string cleaning (regexm) 
> 
> 3.      Misc STATA Commands: preserve/restore, capture, assert
> 
> 4.      User written commands: IPA github page, ado files and other useful user-written commands (orth_out, randomize etc) 
> 
> 5.      Best Data Practices 2.0
> 
> *******************************************************************************/
. 
. ********************************************************************************
. *1 INTEROPERABILITY: c-class variables
. ********************************************************************************
. 
. /*
> c-class values:
> they are designed to provide one all-encompassing way to access system parameters
> and settings, including system directories, system limits etc
> */
. 
. *Example
. creturn list
{txt}
{title:System values}

    {hline}
        c(current_date) = "{res} 9 Feb 2017{txt}"
        c(current_time) = "{res}23:38:37{txt}"
           c(rmsg_time) = {res}0{txt}{col 54}(seconds, from {help rmsg:set rmsg})
    {hline}
       c(stata_version) = {res}14.2
             {txt}c(version) = {res}14.2{txt}{col 54}({help version})
         c(userversion) = {res}14.2{txt}{col 54}({help version})
    {hline}
           c(born_date) = "{res}14 Sep 2016{txt}"
              c(flavor) = "{res}IC{txt}"
                 c(bit) = {res}64
                  {txt}c(SE) = {res}1
                  {txt}c(MP) = {res}0
          {txt}c(processors) = {res}1{txt}{col 54}({help stata/mp:Stata/MP}, {help set processors})
      c(processors_lic) = {res}1
     {txt}c(processors_mach) = {res}4
      {txt}c(processors_max) = {res}1
                {txt}c(mode) = "{res}{txt}"
             c(console) = "{res}{txt}"
    {hline}
                  c(os) = "{res}Windows{txt}"
               c(osdtl) = "{res}64-bit{txt}"
            c(hostname) = "{res}MSPP-SD-2YDHL72{txt}"
        c(machine_type) = "{res}PC (64-bit x86-64){txt}"
           c(byteorder) = "{res}lohi{txt}"
            c(username) = "{res}ah1152{txt}"
    {hline}

{title:Directories and paths}

    {hline}
        c(sysdir_stata) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_base) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_site) = "{res}C:\Program Files ..{txt}"{col 54}({help sysdir})
         c(sysdir_plus) = "{res}c:\ado\plus/{txt}"{col 54}({help sysdir})
     c(sysdir_personal) = "{res}c:\ado\personal/{txt}"{col 54}({help sysdir})
     c(sysdir_oldplace) = "{res}c:\ado/{txt}"{col 54}({help sysdir})
              c(tmpdir) = "{res}C:\Users\ah1152\A..{txt}"
    {hline}
             c(adopath) = "{res}BASE;SITE;.;PERSO..{txt}"{col 54}({help adopath})
                 c(pwd) = "{res}C:\Users\ah1152\B..{txt}"{col 54}({help cd})
              c(dirsep) = "{res}/{txt}"
    {hline}

{title:System limits}

    {hline}
        c(max_N_theory) = {res}2147483620
        {txt}c(max_k_theory) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
    c(max_width_theory) = {res}1048576{txt}{col 54}({help maxvar:set maxvar})
    {hline}
         c(max_matsize) = {res}11000
         {txt}c(min_matsize) = {res}10
{txt}    {hline}
        c(max_macrolen) = {res}4227143
            {txt}c(macrolen) = {res}1935200{txt}{col 54}({help maxvar:set maxvar})
             c(charlen) = {res}67783
          {txt}c(max_cmdlen) = {res}4227159
              {txt}c(cmdlen) = {res}1935216{txt}{col 54}({help maxvar:set maxvar})
         c(namelenbyte) = {res}128
         {txt}c(namelenchar) = {res}32
               {txt}c(eqlen) = {res}1337
{txt}    {hline}

{title:Numerical and string limits}

    {hline}
           c(mindouble) = {res}-8.9884656743e+307
           {txt}c(maxdouble) = {res}8.9884656743e+307
           {txt}c(epsdouble) = {res}2.22044604925e-16
      {txt}c(smallestdouble) = {res}2.2250738585e-308
{txt}    {hline}
            c(minfloat) = {res}-1.70141173319e+38
            {txt}c(maxfloat) = {res}1.70141173319e+38
            {txt}c(epsfloat) = {res}1.19209289551e-07
{txt}    {hline}
             c(minlong) = {res}-2147483647
             {txt}c(maxlong) = {res}2147483620
{txt}    {hline}
              c(minint) = {res}-32767
              {txt}c(maxint) = {res}32740
{txt}    {hline}
             c(minbyte) = {res}-127
             {txt}c(maxbyte) = {res}100
{txt}    {hline}
        c(maxstrvarlen) = {res}2045
       {txt}c(maxstrlvarlen) = {res}2000000000
        {txt}c(maxvlabellen) = {res}32000
{txt}    {hline}

{title:Current dataset}

    {hline}
                   c(N) = {res}0
                   {txt}c(k) = {res}0
               {txt}c(width) = {res}0
             {txt}c(changed) = {res}0
            {txt}c(filename) = "{res}{txt}"
            c(filedate) = "{res}{txt}"
    {hline}

{title:Memory settings}

    {hline}
              c(memory) = {res}33554432
              {txt}c(maxvar) = {res}15000{txt}{col 54}({help maxvar:set maxvar})
             c(matsize) = {res}400{txt}{col 54}({help matsize:set matsize})
            c(niceness) = {res}5{txt}{col 54}({help memory:set min_memory})
          c(min_memory) = {res}0{txt}{col 54}({help memory:set min_memory})
          c(max_memory) = {res}.{txt}{col 54}({help memory:set max_memory})
         c(segmentsize) = {res}33554432{txt}{col 54}({help memory:set segmentsize})
    {hline}

{title:Output settings}

    {hline}
                c(more) = "{res}off{txt}"{col 54}({help more:set more})
                c(rmsg) = "{res}off{txt}"{col 54}({help rmsg:set rmsg})
                  c(dp) = "{res}period{txt}"{col 54}({help dp:set dp})
            c(linesize) = {res}106{txt}{col 54}({help linesize:set linesize})
            c(pagesize) = {res}27{txt}{col 54}({help pagesize:set pagesize})
             c(logtype) = "{res}smcl{txt}"{col 54}({help logtype:set logtype})
             c(noisily) = {res}1
{txt}    {hline}
               c(level) = {res}95{txt}{col 54}({help level:set level})
              c(clevel) = {res}95{txt}{col 54}({help clevel:set clevel})
    {hline}
      c(showbaselevels) = "{res}{txt}"{col 54}({help set showbaselevels})
      c(showemptycells) = "{res}{txt}"{col 54}({help set showemptycells})
         c(showomitted) = "{res}{txt}"{col 54}({help set showomitted})
             c(fvlabel) = "{res}on{txt}"{col 54}({help set fvlabel})
              c(fvwrap) = {res}1{txt}{col 54}({help set fvwrap})
            c(fvwrapon) = "{res}word{txt}"{col 54}({help set fvwrapon})
            c(lstretch) = "{res}{txt}"{col 54}({help set lstretch})
    {hline}
             c(cformat) = "{res}{txt}"{col 54}({help set cformat})
             c(sformat) = "{res}{txt}"{col 54}({help set sformat})
             c(pformat) = "{res}{txt}"{col 54}({help set pformat})
    {hline}
      c(coeftabresults) = "{res}on{txt}"{col 54}({help coeftabresults:set coeftabresults})

{title:Interface settings}

    {hline}
            c(dockable) = "{res}on{txt}"{col 54}({help dockable:set dockable})
       c(dockingguides) = "{res}on{txt}"{col 54}({help dockingguides:set dockingguides})
       c(locksplitters) = "{res}off{txt}"{col 54}({help locksplitters:set locksplitters})
            c(pinnable) = "{res}on{txt}"{col 54}({help pinnable:set pinnable})
        c(doublebuffer) = "{res}on{txt}"{col 54}({help doublebuffer:set doublebuffer})
          c(reventries) = {res}5000{txt}{col 54}({help reventries:set reventries})
          c(fastscroll) = "{res}on{txt}"{col 54}({help fastscroll:set fastscroll})
             c(linegap) = {res}1{txt}{col 54}({help linegap:set linegap})
       c(scrollbufsize) = {res}204800{txt}{col 54}({help scrollbufsize:set scrollbufsize})
               c(maxdb) = {res}50{txt}{col 54}({help maxdb:set maxdb})
    {hline}

{title:Graphics settings}

    {hline}
            c(graphics) = "{res}on{txt}"{col 54}({help set_graphics:set graphics})
       c(autotabgraphs) = "{res}off{txt}"{col 54}({help autotabgraphs:set autotabgraphs})
              c(scheme) = "{res}s2color{txt}"{col 54}({help set_scheme:set scheme})
          c(printcolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set printcolor})
           c(copycolor) = "{res}automatic{txt}"{col 54}({help set_printcolor:set copycolor})
    {hline}

{title:Efficiency settings}

    {hline}
             c(adosize) = {res}1000{txt}{col 54}({help adosize:set adosize})
    {hline}

{title:Network settings}

    {hline}
            c(checksum) = "{res}off{txt}"{col 54}({help checksum:set checksum})
            c(timeout1) = {res}30{txt}{col 54}({help timeout1:set timeout1})
            c(timeout2) = {res}180{txt}{col 54}({help timeout2:set timeout2})
    {hline}
           c(httpproxy) = "{res}off{txt}"{col 54}({help httpproxy:set httpproxy})
       c(httpproxyhost) = "{res}{txt}"{col 54}({help httpproxyhost:set httpproxyhost})
       c(httpproxyport) = {res}80{txt}{col 54}({help httpproxyport:set httpproxyport})
    {hline}
       c(httpproxyauth) = "{res}off{txt}"{col 54}({help httpproxyauth:set httpproxyauth})
       c(httpproxyuser) = "{res}{txt}"{col 54}({help httpproxyuser:set httpproxyuser})
         c(httpproxypw) = "{res}{txt}"{col 54}({help httpproxypw:set httpproxypw})
    {hline}

{title:Update settings}

    {hline}
        c(update_query) = "{res}on{txt}"{col 54}({help update_query:set update_query})
     c(update_interval) = {res}7{txt}{col 54}({help update_interval:set update_interval})
       c(update_prompt) = "{res}on{txt}"{col 54}({help update_prompt:set update_prompt})
    {hline}

{title:Trace (program debugging) settings}

    {hline}
               c(trace) = "{res}off{txt}"{col 54}({help trace:set trace})
          c(tracedepth) = {res}32000{txt}{col 54}({help trace:set tracedepth})
            c(tracesep) = "{res}on{txt}"{col 54}({help trace:set tracesep})
         c(traceindent) = "{res}on{txt}"{col 54}({help trace:set traceindent})
         c(traceexpand) = "{res}on{txt}"{col 54}({help trace:set traceexpand})
         c(tracenumber) = "{res}off{txt}"{col 54}({help trace:set tracenumber})
         c(tracehilite) = "{res}{txt}"{col 54}({help trace:set tracehilite})
    {hline}

{title:Mata settings}

    {hline}
          c(matastrict) = "{res}off{txt}"{col 54}({help mata_set:set matastrict})
            c(matalnum) = "{res}off{txt}"{col 54}({help mata_set:set matalnum})
        c(mataoptimize) = "{res}on{txt}"{col 54}({help mata_set:set mataoptimize})
           c(matafavor) = "{res}space{txt}"{col 54}({help mata_set:set matafavor})
           c(matacache) = {res}2000{txt}{col 54}({help mata_set:set matacache})
            c(matalibs) = "{res}lmatabase;lmataad..{txt}"{col 54}({help mata_set:set matalibs})
         c(matamofirst) = "{res}off{txt}"{col 54}({help mata_set:set matamofirst})
    {hline}

{title:Unicode settings}

    {hline}
           c(locale_ui) = "{res}en_US{txt}"{col 54}({help set locale_ui:set locale_ui})
    c(locale_functions) = "{res}en_US{txt}"{col 54}({help set locale_functions:set locale_functions})
      c(locale_icudflt) = "{res}en_US{txt}"{col 54}({help unicode_locale:unicode locale})
    {hline}

{title:Other settings}

    {hline}
                c(type) = "{res}float{txt}"{col 54}({help generate:set type})
             c(maxiter) = {res}16000{txt}{col 54}({help maxiter:set maxiter})
       c(searchdefault) = "{res}all{txt}"{col 54}({help searchdefault:set searchdefault})
                 c(rng) = "{res}default{txt}"{col 54}({help rng:set rng})
         c(rng_current) = "{res}mt64{txt}"
            c(rngstate) = "{res}XAA00000000000000..{txt}"{col 54}({help rngstate:set rngstate})
           c(varabbrev) = "{res}on{txt}"{col 54}({help varabbrev:set varabbrev})
          c(emptycells) = "{res}keep{txt}"{col 54}({help emptycells:set emptycells})
          c(odbcdriver) = "{res}unicode{txt}"{col 54}({help odbc:set odbcdriver})
            c(haverdir) = "{res}{txt}"{col 54}({help import haver:set haverdir})
    {hline}

{title:Other}

    {hline}
                  c(pi) = {res}3.141592653589793
               {txt}c(alpha) = "{res}a b c d e f g h i..{txt}"
               c(ALPHA) = "{res}A B C D E F G H I..{txt}"
                c(Mons) = "{res}Jan Feb Mar Apr M..{txt}"
              c(Months) = "{res}January February ..{txt}"
               c(Wdays) = "{res}Sun Mon Tue Wed T..{txt}"
            c(Weekdays) = "{res}Sunday Monday Tue..{txt}"
                  c(rc) = {res}111{txt}{col 54}({help capture})
    {hline}

{com}. 
. *Objective: You should be able to run my do file without changing a single line 
. *                       of code
. 
. *Solution: You can do this using c(username) & if/else statements:
. 
. ********************Setting Working Directory**********************************
. 
. /*
> IMPORTANT: ALWAYS use forward slash in folder/file paths becasue:
> 1) windows can read both forward/back slash in file paths but Mac can only
>    process forward slash.
> 2) "Beware the backstabbing backslash" (http://www.stata-journal.com/sjpdf.html?articlenum=pr0042)
>    ___^^Read it after the tutorial_____
> */
. 
. 
. 
. *Approach 1
. 
. *Ali Hamza 1 (Windows)
. if c(username)=="ah1152" {c -(}
.         global user "C:/Users/ah1152/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Ali Hamza 2 (MacOS)
. else if c(username)=="Zambeel" {c -(}
.         global user "/Users/Zambeel/Box Sync/"
. {c )-}
{txt}
{com}. 
. * Beatrice Leydier
. else if c(username)=="Pytha" {c -(}
.         global user "C:/Users/Pytha/Box Sync"
. {c )-}
{txt}
{com}. 
. * Grady Killeen
. else if c(username)=="Grady" {c -(}
.         global user "C:/Users/Grady/Box Sync"
. {c )-}
{txt}
{com}. 
. * Andreas Niederwieser
. else if c(username)=="Andreas" {c -(}
.         global user "C:/Users/Andreas/Box Sync"
. {c )-}
{txt}
{com}. 
. 
. * Shashank Rai (MacOS)
. else if c(username)=="shashankrai" {c -(}
.         global user "/Users/shashankrai/Box Sync"
. {c )-}
{txt}
{com}. 
. * Jessica Hickle
. else if c(username)=="JEHickle" {c -(}
.         global user "/Users/JEHickle/Box Sync"
. {c )-}
{txt}
{com}. * Chris Gray
. else if c(username)=="Chris" {c -(}
.         global user "C:/Users/Chris/Box Sync"
. {c )-}
{txt}
{com}. 
. *       Kaitlyn Turner
. else if c(username)=="kaitlynturner" {c -(}
.         global user "/Users/kaitlynturner/Box Sync"
. {c )-}
{txt}
{com}. 
. *Zachary Scherer
. else if c(username)=="zach" {c -(}
.         global user "C:/Users/zach/Box Sync"
. {c )-}
{txt}
{com}.         
. * everyone else who didn't send me their username and folder path
. else {c -(}
.         global user "Enter_Sync_Folder_Address_here"
.         {c )-}
{txt}
{com}. **
. 
. cd "$user"
{res}C:\Users\ah1152\Box Sync
{txt}
{com}. 
. 
. 
. 
. 
. *Alt-Approach
. 
. if c(os)=="Windows" {c -(}
.         global user "C:/Users/`c(username)'/Box Sync"
.         {c )-}
{txt}
{com}. 
. else {c -(}
.         global user "/Users/`c(username)'/Box Sync"
.         {c )-}
{txt}
{com}. 
. cd "$user"
{res}C:\Users\ah1152\Box Sync
{txt}
{com}. 
. /*Issues with this code:
>  This code is based on following two assumptions which might not always be true:
>         1)We only have Windows or MacOS machines
>         2)Everyone's Box Sync folder is names exactly the same.
> */
. 
. 
. ******************************Log Files*****************************************
. 
. * How to name log file
. * Example: [do file name]_[date]_[your initials] => session3_20170210_AH
. 
. *Approach 1
. log using "gui2de STATA Tutorials/Session 3/Logs/session3_20170210_AH", replace
{err}log file already open
{txt}{search r(604), local:r(604);}

end of do-file

{search r(604), local:r(604);}

{com}. do "C:\Users\ah1152\AppData\Local\Temp\STD14000000.tmp"
{txt}
{com}. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}C:\Users\ah1152\Box Sync\gui2de STATA Tutorials/Session 3/Logs/session3_20170209_10pm_ah1152.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res} 9 Feb 2017, 23:38:45
{txt}{.-}
{smcl}
{txt}{sf}{ul off}